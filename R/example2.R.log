> ##Example 2
> 
> x <- read.csv("data/example2_x.csv")
> summary(x)
     rownum          colnum         val         
 Min.   :  1.0   Min.   :1.0   Min.   :  2.260  
 1st Qu.:100.8   1st Qu.:1.0   1st Qu.:  3.397  
 Median :200.5   Median :1.5   Median :112.000  
 Mean   :200.5   Mean   :1.5   Mean   :295.545  
 3rd Qu.:300.2   3rd Qu.:2.0   3rd Qu.:580.000  
 Max.   :400.0   Max.   :2.0   Max.   :800.000  
> dim(x)
[1] 800   3
> 
> y <- read.csv("data/example2_y.csv")
> summary(y)
     rownum            y         
 Min.   :  1.0   Min.   :0.0000  
 1st Qu.:100.8   1st Qu.:0.0000  
 Median :200.5   Median :0.0000  
 Mean   :200.5   Mean   :0.3175  
 3rd Qu.:300.2   3rd Qu.:1.0000  
 Max.   :400.0   Max.   :1.0000  
> table(y)
      y
rownum 0 1
   1   1 0
   2   0 1
   3   0 1
   4   0 1
   5   1 0
   6   0 1
   7   0 1
   8   1 0
   9   0 1
   10  1 0
   11  1 0
   12  1 0
   13  0 1
   14  1 0
   15  0 1
   16  1 0
   17  1 0
   18  1 0
   19  1 0
   20  0 1
   21  1 0
   22  0 1
   23  1 0
   24  1 0
   25  0 1
   26  0 1
   27  0 1
   28  0 1
   29  0 1
   30  1 0
   31  1 0
   32  1 0
   33  1 0
   34  0 1
   35  1 0
   36  1 0
   37  1 0
   38  1 0
   39  0 1
   40  0 1
   41  1 0
   42  0 1
   43  0 1
   44  1 0
   45  1 0
   46  0 1
   47  0 1
   48  1 0
   49  1 0
   50  1 0
   51  1 0
   52  1 0
   53  1 0
   54  0 1
   55  1 0
   56  0 1
   57  1 0
   58  1 0
   59  1 0
   60  1 0
   61  0 1
   62  1 0
   63  1 0
   64  0 1
   65  1 0
   66  1 0
   67  1 0
   68  1 0
   69  1 0
   70  1 0
   71  1 0
   72  1 0
   73  1 0
   74  1 0
   75  1 0
   76  1 0
   77  1 0
   78  0 1
   79  1 0
   80  0 1
   81  1 0
   82  1 0
   83  1 0
   84  1 0
   85  0 1
   86  1 0
   87  1 0
   88  1 0
   89  1 0
   90  0 1
   91  1 0
   92  0 1
   93  1 0
   94  1 0
   95  0 1
   96  1 0
   97  1 0
   98  1 0
   99  1 0
   100 1 0
   101 1 0
   102 1 0
   103 1 0
   104 1 0
   105 0 1
   106 0 1
   107 0 1
   108 1 0
   109 1 0
   110 1 0
   111 1 0
   112 1 0
   113 1 0
   114 1 0
   115 1 0
   116 1 0
   117 0 1
   118 1 0
   119 0 1
   120 1 0
   121 0 1
   122 0 1
   123 1 0
   124 1 0
   125 1 0
   126 1 0
   127 0 1
   128 1 0
   129 1 0
   130 1 0
   131 0 1
   132 1 0
   133 1 0
   134 1 0
   135 1 0
   136 1 0
   137 1 0
   138 1 0
   139 1 0
   140 0 1
   141 1 0
   142 0 1
   143 1 0
   144 1 0
   145 1 0
   146 1 0
   147 1 0
   148 1 0
   149 0 1
   150 1 0
   151 0 1
   152 1 0
   153 0 1
   154 1 0
   155 1 0
   156 0 1
   157 1 0
   158 0 1
   159 1 0
   160 1 0
   161 1 0
   162 1 0
   163 0 1
   164 1 0
   165 1 0
   166 1 0
   167 1 0
   168 1 0
   169 1 0
   170 1 0
   171 1 0
   172 1 0
   173 1 0
   174 0 1
   175 1 0
   176 0 1
   177 1 0
   178 0 1
   179 1 0
   180 1 0
   181 1 0
   182 1 0
   183 1 0
   184 0 1
   185 1 0
   186 1 0
   187 1 0
   188 1 0
   189 1 0
   190 1 0
   191 0 1
   192 1 0
   193 1 0
   194 1 0
   195 0 1
   196 1 0
   197 1 0
   198 0 1
   199 1 0
   200 1 0
   201 1 0
   202 0 1
   203 0 1
   204 1 0
   205 0 1
   206 0 1
   207 1 0
   208 0 1
   209 1 0
   210 1 0
   211 1 0
   212 1 0
   213 1 0
   214 1 0
   215 0 1
   216 0 1
   217 1 0
   218 0 1
   219 1 0
   220 0 1
   221 1 0
   222 1 0
   223 0 1
   224 1 0
   225 1 0
   226 0 1
   227 1 0
   228 1 0
   229 1 0
   230 0 1
   231 1 0
   232 1 0
   233 1 0
   234 1 0
   235 0 1
   236 1 0
   237 0 1
   238 1 0
   239 1 0
   240 1 0
   241 1 0
   242 0 1
   243 0 1
   244 1 0
   245 1 0
   246 1 0
   247 1 0
   248 1 0
   249 1 0
   250 1 0
   251 1 0
   252 1 0
   253 0 1
   254 0 1
   255 0 1
   256 1 0
   257 0 1
   258 0 1
   259 1 0
   260 1 0
   261 1 0
   262 1 0
   263 0 1
   264 0 1
   265 0 1
   266 1 0
   267 1 0
   268 0 1
   269 0 1
   270 1 0
   271 0 1
   272 1 0
   273 0 1
   274 1 0
   275 1 0
   276 0 1
   277 1 0
   278 0 1
   279 0 1
   280 0 1
   281 1 0
   282 1 0
   283 1 0
   284 1 0
   285 0 1
   286 1 0
   287 0 1
   288 0 1
   289 1 0
   290 1 0
   291 0 1
   292 1 0
   293 1 0
   294 1 0
   295 1 0
   296 1 0
   297 1 0
   298 1 0
   299 1 0
   300 1 0
   301 1 0
   302 0 1
   303 0 1
   304 0 1
   305 1 0
   306 1 0
   307 0 1
   308 1 0
   309 1 0
   310 1 0
   311 1 0
   312 1 0
   313 1 0
   314 0 1
   315 1 0
   316 0 1
   317 0 1
   318 0 1
   319 0 1
   320 1 0
   321 1 0
   322 1 0
   323 1 0
   324 1 0
   325 1 0
   326 1 0
   327 1 0
   328 0 1
   329 1 0
   330 1 0
   331 1 0
   332 1 0
   333 1 0
   334 1 0
   335 0 1
   336 0 1
   337 1 0
   338 1 0
   339 1 0
   340 0 1
   341 1 0
   342 0 1
   343 1 0
   344 1 0
   345 1 0
   346 1 0
   347 1 0
   348 1 0
   349 1 0
   350 1 0
   351 0 1
   352 1 0
   353 0 1
   354 1 0
   355 0 1
   356 0 1
   357 1 0
   358 1 0
   359 0 1
   360 1 0
   361 0 1
   362 0 1
   363 1 0
   364 1 0
   365 0 1
   366 1 0
   367 1 0
   368 1 0
   369 1 0
   370 1 0
   371 0 1
   372 0 1
   373 0 1
   374 0 1
   375 1 0
   376 1 0
   377 1 0
   378 0 1
   379 1 0
   380 1 0
   381 1 0
   382 0 1
   383 1 0
   384 1 0
   385 0 1
   386 1 0
   387 0 1
   388 1 0
   389 1 0
   390 1 0
   391 0 1
   392 0 1
   393 0 1
   394 0 1
   395 0 1
   396 1 0
   397 1 0
   398 1 0
   399 1 0
   400 1 0
> dim(y)
[1] 400   2
> 
> #reshape x wide
> x <- reshape(x, direction="wide", timevar="colnum", idvar="rownum")
> 
> df <- merge(x, y, by="rownum")
> names(df)
[1] "rownum" "val.1"  "val.2"  "y"     
> dim(df)
[1] 400   4
> 
> summary(glm(y ~ val.1 + val.2, data=df, family=binomial("logit")))

Call:
glm(formula = y ~ val.1 + val.2, family = binomial("logit"), 
    data = df)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.2730  -0.8988  -0.7206   1.3013   2.0620  

Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) -4.949378   1.075093  -4.604 4.15e-06 ***
val.1        0.002691   0.001057   2.544   0.0109 *  
val.2        0.754687   0.319586   2.361   0.0182 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 499.98  on 399  degrees of freedom
Residual deviance: 480.34  on 397  degrees of freedom
AIC: 486.34

Number of Fisher Scoring iterations: 4

> 
> 
